Mary Mitchell
Project4 Option1: Exercises

1. Explain how to avoid starvation in your implementation.
	To make sure that all animals get to eat, my solution has an algorithm to switch turns in the kitchen. For example, if a cat is the first to enter the kitchen then it is in charge of giving control of the kitchen to the next animal. Starvation is avoided by always trying to switch turns to the opposite animal type first. So the cat will check if any mice are waiting on the kitchen and signal them. Otherwise, if there are no waiting mice, any waiting cats will be signaled to make sure the kitchen is being fully utilized. If no animals are waiting the kitchen door is left open for the next animals that need it. Overall, starvation is avoided by making sure that no one animal type can hog the kitchen from the other by always making sure the other animal type has a turn. 

2. Comment on your experience of implementing the Cats-and-Mice program. Can you derive any principles about the use of the semaphore synchronization primitives?
	My experience working on this project was a challenging but good one. Having the handouts from lecture made this much easier while still keeping the project a challenge. Debugging my program really helped in my understanding about semaphores and how they work. For example, many of my problems came from signaling at the wrong time. I came to realize that my signals were allowing three or more animals in the kitchen at once. Essentially, I was signaling multiple times when there should have only been one signal. Instead of the first cat or mouse signaling the next animals, any animal that was leaving the kitchen sent a signal. To fix this, I made sure that the first animal in the kitchen was the only one that had control over signaling the next group. This entire project was really interesting to see out many different processes can be coordinated using semaphore functions wait and signal.  
