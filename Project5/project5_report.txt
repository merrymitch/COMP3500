Mary Mitchell
COMP3500-001
04/25/2022
Project 5 Report

Solution Description
(1) How did you separate scheduling mechanism from scheduling policies?
	I made a function for each scheduling policy and my scheduling mechanism in the main function chose which one to run. By keeping the policy implementions out of the main function, it separates them from the actual scheduling mechanism. This makes it simpler to add another policy if necessary. 
(2) How did you implement the three scheduling algorithms?
	Each scheduling algorithm is a function in a file called policies.c. For FCFS, I added each task to a ready queue according to their arrival time. Since each task was added to the ready queue consecutively based on arrival time, the queue was automatically ordered with the first tasks to arrive being at the front of the list. Starting at the beginning of the queue, each task was run until no tasks remained. For SRTF, I added each task to a ready queue according to their arrival time. Then for every clock cycle, the task with the shortest remaining time was chosen to run. This was repeated until no tasks remained. For RR, I added each task to a ready queue according to their arrival time. Then, similar to FCFS, the first task in the ready queue that was not complete was chosen to run. This task would run until completion or until it had used too much cpu time which was based on the time quantum. 
(3) How did you calculate waiting times? 
	I used a function that took an array of finished tasks. Then I used the formula: "wait time = end time - arrival time - burst time" to get the wait time for each task which I used to get the average.
(4) How did you calculate response times?
	I used a function that took an array of finished tasks. Then I used the formula: "response time = start time - arrival time" to get the response time for each task which I used to get the average.
(5) How did you calculate turnaround times?
	I used a function that took an array of finished tasks. Then I used the formula: "turnaround time = end time - arrival time" to get the turnaround time for each task which I used to get the average.
(6) How did you implement the command-line parser?
	I used argc and *argv[] to determine the number of arguments and if those arguments were valid. Since these variables hold the information that was passed in, all that was necessary was determining if the values were proper or not. Most of the code I used for this was from input.c and command.c provided for us on Canvas. 

Generality and Error Checking
(1) How general is your solution?
	It's pretty general in the sense that adding more policies could be easily done. The policies themselves are not very general but since they are separate from the scheduling mechanism, you don't have to worry about them if you want to add a new policy to the main program. All that has to be done is add the policy algorithm to policies.c and make it recognizable to the command line parser in the main function.
(2) How easy would it be to add a new scheduling policy into your scheduler?
	It would be pretty easy. You would only have to add the policy algorithm to policies.c and then add to the command line parser so it recognizes when the policy is being called.
(3) Does your program offer input error checking?
	Yes. It checks that there are an acceptable number of arguments being passed and that the arguments themselves are valid. I used input.c and command.c from Canvas to help me do this.

Miscellaneous factors
(1) Is your code elegant?
	I think it is somewhat elegant. I tried to use a lot of helpful comments and keep the code readable. I used a couple of helper functions within my policy algorithms to make things simpler.  
(2) How innovative is your solution? Did you try any ideas not suggested here?
	I wasn't too innovative. I tried not to complicate things for myself and instead focussed on understanding the basics of the policies. This was a particularly challenging project for me, so I stuck to what I was comfortable with and what I knew would work.
(3) Did you document all outside sources?
	Yes. I only used the Canvas and lecture materials along with stackoverflow (to determine what some of my errors meant). I included this in my comment blocks.

Sample Input/Output
./scheduler task.list FCFS
Open file: task.list
Scheduling Policy: FCFS
There are 6 tasks loaded...
Task PID: 1, Arrival Time: 0, Burst Time: 10
Task PID: 2, Arrival Time: 0, Burst Time: 9
Task PID: 3, Arrival Time: 3, Burst Time: 5
Task PID: 4, Arrival Time: 7, Burst Time: 4
Task PID: 5, Arrival Time: 10, Burst Time: 6
Task PID: 6, Arrival Time: 10, Burst Time: 7
Press any key to continue ...
==================================================================
<time 0> process 1 is running
<time 1> process 1 is running
<time 2> process 1 is running
<time 3> process 1 is running
<time 4> process 1 is running
<time 5> process 1 is running
<time 6> process 1 is running
<time 7> process 1 is running
<time 8> process 1 is running
<time 9> process 1 is running
<time 10> process 1 is finished...
<time 10> process 2 is running
<time 11> process 2 is running
<time 12> process 2 is running
<time 13> process 2 is running
<time 14> process 2 is running
<time 15> process 2 is running
<time 16> process 2 is running
<time 17> process 2 is running
<time 18> process 2 is running
<time 19> process 2 is finished...
<time 19> process 3 is running
<time 20> process 3 is running
<time 21> process 3 is running
<time 22> process 3 is running
<time 23> process 3 is running
<time 24> process 3 is finished...
<time 24> process 4 is running
<time 25> process 4 is running
<time 26> process 4 is running
<time 27> process 4 is running
<time 28> process 4 is finished...
<time 28> process 5 is running
<time 29> process 5 is running
<time 30> process 5 is running
<time 31> process 5 is running
<time 32> process 5 is running
<time 33> process 5 is running
<time 34> process 5 is finished...
<time 34> process 6 is running
<time 35> process 6 is running
<time 36> process 6 is running
<time 37> process 6 is running
<time 38> process 6 is running
<time 39> process 6 is running
<time 40> process 6 is running
<time 41> process 6 is finished...
<time 41> all processes finished ......
==================================================================
Average waiting time:    14.17
Average response time:   14.17
Average turnaround time: 21.00
Overall CPU usage:       100.00%
==================================================================

./scheduler task.list RR 4
Time quantum is set to: 4
Open file: task.list
Scheduling Policy: RR
There are 6 tasks loaded...
Task PID: 1, Arrival Time: 0, Burst Time: 10
Task PID: 2, Arrival Time: 0, Burst Time: 9
Task PID: 3, Arrival Time: 3, Burst Time: 5
Task PID: 4, Arrival Time: 7, Burst Time: 4
Task PID: 5, Arrival Time: 10, Burst Time: 6
Task PID: 6, Arrival Time: 10, Burst Time: 7
Press any key to continue ...
==================================================================
<time 0> process 1 is running
<time 1> process 1 is running
<time 2> process 1 is running
<time 3> process 1 is running
<time 4> process 2 is running
<time 5> process 2 is running
<time 6> process 2 is running
<time 7> process 2 is running
<time 8> process 3 is running
<time 9> process 3 is running
<time 10> process 3 is running
<time 11> process 3 is running
<time 12> process 1 is running
<time 13> process 1 is running
<time 14> process 1 is running
<time 15> process 1 is running
<time 16> process 4 is running
<time 17> process 4 is running
<time 18> process 4 is running
<time 19> process 4 is running
<time 20> process 4 is finished...
<time 20> process 2 is running
<time 21> process 2 is running
<time 22> process 2 is running
<time 23> process 2 is running
<time 24> process 5 is running
<time 25> process 5 is running
<time 26> process 5 is running
<time 27> process 5 is running
<time 28> process 6 is running
<time 29> process 6 is running
<time 30> process 6 is running
<time 31> process 6 is running
<time 32> process 3 is running
<time 33> process 3 is finished...
<time 33> process 1 is running
<time 34> process 1 is running
<time 35> process 1 is finished...
<time 35> process 2 is running
<time 36> process 2 is finished...
<time 36> process 5 is running
<time 37> process 5 is running
<time 38> process 5 is finished...
<time 38> process 6 is running
<time 39> process 6 is running
<time 40> process 6 is running
<time 41> process 6 is finished...
<time 41> all processes finished ......
==================================================================
Average waiting time:    22.00
Average response time:   8.33
Average turnaround time: 28.83
Overall CPU usage:       100.00%
==================================================================

./scheduler task.list SRTF
Open file: task.list
Scheduling Policy: SRTF
There are 6 tasks loaded...
Task PID: 1, Arrival Time: 0, Burst Time: 10
Task PID: 2, Arrival Time: 0, Burst Time: 9
Task PID: 3, Arrival Time: 3, Burst Time: 5
Task PID: 4, Arrival Time: 7, Burst Time: 4
Task PID: 5, Arrival Time: 10, Burst Time: 6
Task PID: 6, Arrival Time: 10, Burst Time: 7
Press any key to continue ...
==================================================================
<time 0> process 2 is running
<time 1> process 2 is running
<time 2> process 2 is running
<time 3> process 3 is running
<time 4> process 3 is running
<time 5> process 3 is running
<time 6> process 3 is running
<time 7> process 3 is running
<time 8> process 3 is finished...
<time 8> process 4 is running
<time 9> process 4 is running
<time 10> process 4 is running
<time 11> process 4 is running
<time 12> process 4 is finished...
<time 12> process 2 is running
<time 13> process 2 is running
<time 14> process 2 is running
<time 15> process 2 is running
<time 16> process 2 is running
<time 17> process 2 is running
<time 18> process 2 is finished...
<time 18> process 5 is running
<time 19> process 5 is running
<time 20> process 5 is running
<time 21> process 5 is running
<time 22> process 5 is running
<time 23> process 5 is running
<time 24> process 5 is finished...
<time 24> process 6 is running
<time 25> process 6 is running
<time 26> process 6 is running
<time 27> process 6 is running
<time 28> process 6 is running
<time 29> process 6 is running
<time 30> process 6 is running
<time 31> process 6 is finished...
<time 31> process 1 is running
<time 32> process 1 is running
<time 33> process 1 is running
<time 34> process 1 is running
<time 35> process 1 is running
<time 36> process 1 is running
<time 37> process 1 is running
<time 38> process 1 is running
<time 39> process 1 is running
<time 40> process 1 is running
<time 41> process 1 is finished...
<time 41> all processes finished ......
==================================================================
Average waiting time:    10.50
Average response time:   9.00
Average turnaround time: 17.33
Overall CPU usage:       100.00%
==================================================================
